#include <SPI.h>
#include <DMD.h>
#include <TimerOne.h>
#include "SystemFont5x7.h"
#include "Arial_Black_16.h"
#include <SoftwareSerial.h>

#define ROW_MODULE 2
#define COLUMN_MODULE 1

DMD p10(ROW_MODULE, COLUMN_MODULE);
SoftwareSerial gsmSerial(10, 11);  // RX, TX pins for SIM900/SIM800 module

char message[200];
byte pos_index = 0;
int i;
char welcome_screen[] = " JERUSALEM COLLEGE OF ENGINEERING-ECE DEPARTMENT";

void p10scan()
{
  p10.scanDisplayBySPI();
}

void setup()
{
  Timer1.initialize(2000);
  Timer1.attachInterrupt(p10scan);
  p10.clearScreen(true);
  Serial.begin(9600);
  gsmSerial.begin(9600); // Set the baud rate for SIM900/SIM800 module
  delay(2000); // Allow some time for the GSM module to initialize
  strcpy(message, welcome_screen);
  message[sizeof(welcome_screen) - 1] = '\0';
}

void loop()
{
  // Your existing code for clearing message on serial input
  if (Serial.available())
  {
    for (i = 0; i < 199; i++)
    {
      message[i] = '\0';
      Serial.print(message[i]);
    }
    pos_index = 0;
  }

  // GSM module communication using AT commands
  gsmSerial.println("AT+CMGF=1"); // Set SMS mode to text
  delay(100);
  gsmSerial.println("AT+CNMI=2,2,0,0,0"); // Enable receiving SMS notification
  delay(100);

  while (gsmSerial.available() > 0)
  {
    p10.clearScreen(true);
    if (pos_index < (199))
    {
      char char_read = gsmSerial.read(); // Read data from GSM module
      message[pos_index] = char_read;
      pos_index++;
    }
  }

  // Your existing code for displaying message on the LED display
  p10.selectFont(Arial_Black_16);
  p10.drawMarquee(message, strlen(message) * 6, (16 * ROW_MODULE) - 1, 0);
  long start = millis();
  long timer_start = start;
  boolean flag = false;
  while (!flag)
  {
    if ((timer_start + 30) < millis())
    {
      flag = p10.stepMarquee(-1, 0);
      timer_start = millis();
    }
  }
}
